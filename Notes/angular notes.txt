- tsconfig.json & other tsconfig files
        are related to typescript configuration files. what js version code should be generated and what coding standards we should follow while writing ts code etc are stored here.

- package.json
      all packages that are currently used in the project are added here.
	whenever we install any package in our project using npm then automatically an entry 		is added inside this project.
	need to handle carefully - maximum should avoid to handle manually

- angular.json
	this file contains information about angular project and its several components 	settings.
		- main landing page for project
		- which one is the root module for the project
		- application prefixes and folders location
		- styles - you need to apply in project
		- scripts - additional JS files like jquery are required in project
		...........
              "index": "src/index.html",
			is specifying that this is our startup page for the project
	do not write any html code here because we need to generate everything from angular 	components.

	     "main": "src/main.ts",
			as we mentioned angular is collection of modules and by default one root module should be the startup module and that startup module is mentioned in main entry.
			|
main.ts inside src folder
 - contains the modules and configuration entries - most important is the root module class name

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

Here AppModule is our application Root Module class and the program is present in src/app/app.module.ts file.

Note: In angular everything what we create will be in the form of a class. A decorator specifies what that class is i.e @NgModule says the class is a Module
				 @Component says the class is a Component
				 @Directive says the class is a Directive
				  similarly Pipe, Gaurd ....
export before class declaration specifies that this class can be consumed in other parts of project ( es specification )

other than that import is used to specify which classes are required for the angular program

				Project
				   |
				Module[s]
				   |
				collection of various types of components
				( components--> directives, pipes, guards, model, services )

All such components are mentioned inside @NgModule decorator - whenever we create any type of component we need to register it inside this @NgModule.

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})

---------------------------------------------------------------------------------------------
Angular Components

- Every component that we create in Angular is divided into View(Presentation) and Controller(logic)

View --> html
Controller --> in .ts file all the class code

In addition to the above 2 we use model class in both presentation & controller. So Model View Controller pattern is used to build angular components. (one of the advantage)
				|
Binding* ( declarative approach )

- Angular follows binding concept in order to read/write data between this controller and view.

- once component is created we can use that component using its selector.
  selector value is user defined and can be used as a tag in other component html views.

To create a component :
 - preferebly put in Components folder
		|
	create a file   filename.component.ts
			filename.component.html
		|
	write required import, selector etc
		|
	go to app.module.ts and add the newly created component classname in declarations
		|
	goto app.component.html and use the created selector
-------------------------------------------------------------------------------------------

Adding Angular components using Angular CLI

ng generate component <componentname>
or
ng g c <componentname>

Every Angular component that we create has a lifecycle events called component lifecycle hooks.
starting from component creation till the component getting destroyed.

As a developer when we want to run code at specific point of time then we need to search for relavant component hook and write code inside it.

- It is always preferred to create a model class to handle state of component i.e to store data related to component - without model class handling data will result into many complications for testing and other scenarios.

To create a model class preferebly create models folder and then we can use
	ng g class <modelclassname>

remember model class are just imported wherever required they need not be added to any module.ts and other locations.

-------------------------------------------------------------------------------------------------------------------
https://github.com/PBende/ANGDEC21


Directives in Angular :

Directives are 2 types
(i) Built in directives
(ii) User defined directives

All directives are classes that add additional functionality in the form of code or presentation to the existing element(itself). Angular Declarative approach is achieved using these directives mainly.

<element directive....>

<li *ngFor

To understand directives and its implementation let us understand the types of directives

1. Component Directives
2. Structural Directives
3. Attribute Directives

Component Directives

- These are most common directives used in angular programming. The selector that we specify renders the view or html resulting in an output.

Structural Directives:

unlike component directives these directives add or modify DOM behaviour for existing element.
modify --> adding addl content. removing content
	ex: *ngFor, *ngIf, *ngSwitch


Attribute Directives :

change appearance of an element


Demo:
assets folder importance
 - any resource in angular application should be stored inside assets folder only.

assets--> images & videos

bootstrap : CDN or npm package

Content Delivery Network :

property binding

--------------------------------------------------------------------------

Adding Packages to our Angular application

When adding any package using CDN links it is faster and efficient but the client/server where we are hosting our application needs to have internet connectivity and in some realtime scenarios we might not have that connectivity. Also every package doesn't support CDN links.
				|
In such cases we need to install our packages locally within our application.
	npm install <package>

In our example we installed bootstrap as CDN. Let us replace 

npm install bootstrap --save

- Once package is installed it doesn't mean that it is readily available - for different packages we might have additional requirements. In case of bootstrap after installing we have to add an entry in angular.json under styles section.

absolute path : c:\angprojects\angdec21\..\node_modules
relative path : node_modules/bootstrap/......

---------------------------------------------------------------------------------------------

Demo: 
- Creating Component and consuming it using selector
- String Interpolation and Example
- Property Binding & Event Binding
- Model class and consume it as a List
- Dynamically perform CRUD operations ( Create, Read --> Update & Delete )
- Referencing Elements

Angular Change Detection** : 
   
Whenever any data in angular component changes then automatically angular updates its view to reflect the changes. Angular monitors at low level what changes have occured within the component by injecting JS & other code(asynchronous). It has a hierarchy maintained
				|
If we don't want angular change detection to work implicitly then we can specify change detection strategy


@Component({
  selector: 'app-tlist',
  templateUrl: './tlist.component.html',
  ChangeDetection: ChangeDetectionStrategy.OnPush
  styleUrls: ['./tlist.component.css']
})

- Apart from mentioning changedetection strategy we can also trigger it manually.

detectChanges()

Angular Forms** :

To handle html elements along with model classes and also to implement all input related functionality along with validation and states angular provides forms concept.

Registration form			model class
					  - prop1
	Name
	Surname
	Phone
	Email
	....
To do this all Angular provides 2 types of forms concept
	- Template Driven Forms
	- Reactive or Model Driven Forms**
--------------------------------------------------------------------------------------------

Template Driven Forms
 - less preferred
Demo:

----------------------------------------------------------------------------------------

Reactive Forms or Model Driven Forms
 - Recommended
 - In Template Driven forms we are binding our view elements with model class or other variables in ts/class file. It updates data in asynchronous way - mutable data.
			whereas
   In Model Driven approach i.e reactive forms we create a model in our class and bind our elements to this defined model class elements. Data is updated in synchronous manner which results in always data is upto date and no delays.
					|
(Template driven forms are provided to support old AngularJS forms concept.)

Demo:

Steps

- In the existing angular project goto models--open the terminal
				|
- In terminal ng g class User
	this creates a new class inside models folder. Inside this class create all the required members for which we will design the form.

export class User {
  name: string;
  account: {
      email: string;
      confirm: string;
  }
}

- Once your model class is ready goto Components --> open the terminal and create a new component

- In terminal ng g c Register

- As we are in Model driven approach we need to import ReactiveFormsModule and inside .ts file import ReactiveForms related classes.


import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { User } from 'src/app/models/user';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent implements OnInit {

  constructor() { }
  user:FormGroup; // This is for our ReactiveForm

  userdata:User;  // This is our model class

  ngOnInit(): void {
    this.user = new FormGroup({
      name: new FormControl('', [Validators.required, Validators.minLength(2)]),
      account: new FormGroup({
          email: new FormControl('', [Validators.required,Validators.email]),
          confirm: new FormControl('', Validators.required)
      })
    });
  }

  onSubmit()
  {
    debugger;
    this.userdata=this.user.value; // **
    console.log(this.userdata);
    alert("Data Successfully Submitted...!");
  }

}


- Once class is defined with formgroup now goto html and design html forms according to created formgroup and formcontrol definitions.

- create html as per model declarations and along with error messages for given validations

<h2>User Registration</h2>

<form novalidate (ngSubmit)="onSubmit()" [formGroup]="user">
    <label>
      <span>Full name</span>
      <input type="text" placeholder="Full name" formControlName="name">
    </label>
    <div class="error" *ngIf="user.get('name').hasError(('required')) && user.get('name').touched">
      Name is required
    </div>
    <div class="error" *ngIf="user.get('name').hasError('minlength') && user.get('name').touched">
      Minimum of 2 characters required
    </div>

    <div formGroupName="account">
      <label>
        <span>Email address</span>
        <input type="email" placeholder="Your email address" formControlName="email">
      </label>
      <div class="error"
        *ngIf="user.get('account').get('email').hasError('required') && user.get('account').get('email').touched">
        Email is required
      </div>

      <div>
      <label>
        <span>Confirm address</span>
        <input type="email" placeholder="Confirm your email address" formControlName="confirm">
      </label>
      <div
        class="error"
        *ngIf="user.get('account').get('confirm').hasError('required') && user.get('account').get('confirm').touched">
        Confirming email is required
      </div>
      <div class="error" *ngIf="user.get('account').touched && user.get('account').hasError('nomatch')">
        Email addresses must match
      </div>
    </div>
    </div>

    <button type="submit" class="btn btn-primary" [disabled]="user.invalid">Sign up</button>
</form>


- Finally add the selector in app.component.html and execute it

============================================================================================


Attribute Directives

<input type="text" id="t1" Hlgrow ..... >

- which are related to appearance of the element.

- Angular has lot of built in attribute directives and we have been using them.

- While developing application many requirements are repetitive for some elements - In such 	cases create user defined directives and apply them to elements.

- Every attribute directive is a component but without any presentation for itself which means there will be no selector tag in html( because it is consumed as an attribute inside an element )

- Angular provides a decorator called @Directive for all the directives.

Review :
	- What are Directives
	- How Directives are also like components
	- How Directives are different than components
	- *Importance of Directives in the project

Now Inside Directive ?
 Angular provides components or classes that provide a reference to the element that directive is referring to ElementRef is the class.
 Also it provides Renderer class to apply any changes to the referred element

Example:

import { Directive,ElementRef,Renderer2 } from '@angular/core';

@Directive({
  selector: '[HLGrow]',
  host:{
    '(focus)' : 'onFocus()',
    '(blur)' : 'onBlur()'
  }
})
export class HLGrowDirective {

  constructor(private el:ElementRef, private renderer : Renderer2) { }

  onFocus(){
    this.el.nativeElement.style.backgroundColor='yellow';
    this.renderer.setStyle(this.el.nativeElement,'width','200px');
  }

  onBlur(){
    this.el.nativeElement.style.backgroundColor='white';
    this.renderer.setStyle(this.el.nativeElement,'width','150px');
  }

}

<input type="text" id="t1" HLGrow ..... >

------------------------------------------------------------------------------------

import { Directive, ElementRef, HostListener } from '@angular/core';
  @Directive({
    selector: '[OnlyNumberInput]'
  })
export class OnlyNumberInputDirective {
  @HostListener('keypress', ['$event'])
  onKeyDown(event: any) {
    const CharCode=event.charCode;
    if((CharCode<48||CharCode>57)&&CharCode!=46){
      event.preventDefault();
    }
  }
}

- Create a blinking directive means when applied that element should blink 5 times and stop

============================================================================================

Angular Services : 
Dependency Injection :

Till now we have built angular components which contains Model View Controller. All our code or logic was written inside the controller part of component.
				|
Writing code inside the component will be more usefull to that specific component and also the code increases with more responsibilities which is not good for scalable and maintainable code. Instead we should create different classes to perform different operations so we can reuse them in other parts of application.
				|
		Modularity & Reusability
				|
To implement this from Language side we need to have good support and Angular provides it in the form of Services. 

Angular Services can be used to store any common value required during execution of program, any function or any feature. Again every service that we create should be with well defined purpose and do it in robust way means perform it well. ( Single Responsibility )
				
By preparing a component with a service our components become lean and more efficient and more manageable.


Dependency Injection : 

One of the feature of angular is Angular runtime supports built in dependency injection. Once components start consuming services we might have to write many services for many components for different purposes. So a simple and easy way to consume services is required along with testing support.

DI allows us to inject services into a module, component or to entire project. Angular provides another decorator @Injectable() to make a class accessible to other classes

@Injectable()
export class DemoClass
{
  f1()
  {}
  f2(){
  }
}
--------------------------------------
@Component({
...
})
export class EmpComponent
{
   constructor(private democlass:DemoClass){}
   
   Add()
   {
     this.democlass.f1();
   }
}

To create a service using CLI we can use
	ng g service/s Travel
		|
	travel.service.ts

- Preferebly in Services folder

demo:

- a service can be consumed to entire application or to a specific module or to a specific component. Consumption remains same.
			|
	

- reactive forms along with services --> CRUD Operations

====================================================================================
Building effective and reusable components (or) Communicating and Sharing data between components :

Till now we have built components that are reused with selector in more than one place. It is also important that components should share data which means passing data from one component to other.

		Component 1   <--------->  Component 2
		(parent)		   (child)

In Angular we have 2 important decorators @Input() & @Output()

Context ---> Parent to Child
		
		(Parent)		(Child)
		TListComponent		AddTravel
		<AddTravel>

@Input() decorator is written in child component for which data will be sent from parent component

					class AddTravel
					{
					 @Input() Ename:string
						....
					}
Like this we can design a component that can take input from parent component resulting in for multiple purposes.

from parent

@Output() decorator is also written in child component and it allows us to pass data from child to parent.

3 steps for @Output
--------------------

(i)  import { Output, EventEmitter } from .....core

(ii) specify a property and add @Output() decorator

	@Output() notify=new EventEmitter<T>();

(iii) this.notify.emit(<value>);

@Output is making a property for passing data

notify is the name through which we will pass data
-------------------------------------------
In Parent

<child (notify)="f1()" .....>


f1()
{

}

-----------------------------------------------------------------------------
Demo :

@Input() with model class data
@Output by communicating comments to parent class

Exercize --> create a reusable component which displays the count of likes that users provide for individual survey

-----------------------------------------------------------

Communicating with DataSource from Angular ( Javascript )
Web Apis

DataSource --> where data is present and primarily it is database like SQL Server, Oracle, 		PostGreSql, MongoDB etc

Angular communicates with DataSources using Web Apis.

Web Api are programs that serialize data in open standard formats like XML, JSON

Application Programming Interface

RESTfull services --> Programs written in the form of services or Service Oriented Architecture(SOA). Every Service/method is consumed with a Uri.

Angular <----JSON----> Web Api <------> DataSource(DB..)

Today we have huge no of Apis for most of our requirements starting from browser level till cloud level including AI, ML , DataScience

Where do we build these API's ?
If we want to build api's then frameworks/languages like .NET Core, JAVA, Python etc can be used.

.NET core is one of the richest platform today to build api.


SOA/RESTFull --> Communication should be with HTTP standards using its verbs

		GET ---> retrieving the data
		POST --> adding the data
		PUT --> Updating the data
		Delete --> Delete the data

So Web Api's follow the same and provide their methods to be consumed in HTTP verbs model.

------------------------------------------------------------------------------------------


Consuming Apis from Angular

import {HttpClientModule} from '@angular/common/http';
	|
import { HttpClient } from '@angular/common/http';
	|
using this HttpClient class we will invoke All Http Operations
						|
					get,post,put,delete and other
All these methods return observables*

In asynchronous programming--> It is very complex to handle requests and responses as it is completely thread based. So for better asynchronous handling Promises and Observables concept is provided by Javascript( Angular and other frameworks) Rx/Js is the most popular library for the async operations.
Angular use this earlier as an external library and today it is included in most of its libraries like reactive forms, httpclient etc


Thread t1=new ThreadStart(f1);
t1.start()
f2();

------------------------------------------------------------------------------------------
Example : Creating and Consuming API's from Angular

- Create or find an existing API and ensure that API is running. Also note the URL of running api because we need to use as part of angular code.
				|
In my example ---> http://localhost:34135/api/employee

In realtime development url and deployment urls will be different. Angular provides environment.ts and environment.prod.ts for maintaining different urls.
				|
Goto Angular Project --> add apiurl in environment.ts
				|
Add HttpClientModule as part of app.module.ts so that we can make httpclient calls from angular project
import { HttpClientModule } from '@angular/common/http';

				|
Goto Services and create a new service which should be written with methods to invoke apis.
				|
emp-service.service.ts

import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { HttpClient,HttpHeaders }    from '@angular/common/http'; 
import { catchError, tap } from 'rxjs/Operators';
// import { catchError, map, tap } from 'rxjs/Operators';


@Injectable({
  providedIn: 'root'
})
export class EmpServiceService {

 apiUrl=environment.apiUrl;

  constructor(private http: HttpClient) { }
  httpOptions = {  
    headers: new HttpHeaders({  
      'Content-Type': 'application/json'  
    })  
  }    
  GetEmployees(){       
    return this.http.get(apiUrl);  
  }  
  
  postEmployee(formData:any){  
   // return this.http.post('http://localhost:53045/api/Employee/CreateorUpdate',formData); 
   return this.http.post<any>('http://localhost:34135/api/Employee/Create',formData).pipe(tap(formData), catchError(this.handleError<any>('Batch Add Failed')));
  }  
  
  putEmployee(id,formData){  
    return this.http.put<any>('http://localhost:34135/api/Employee/Update',formData).pipe(tap(formData), catchError(this.handleError<any>('Batch Update Failed')));
   // return this.http.put('http://localhost:53045/api/Employee/CreateorUpdate',formData);  
  } 

  Delete(id):Observable<number>{ 
    return this.http.delete<number>('http://localhost:34135/api/Employee/Delete?id='+id);     
  
  }
 
  // GetEmployeebyId(id) {
  //   return this.http.get<any>("http://localhost:34135/api/Employee/GetEmployee/{id} ", id).pipe(tap(id), catchError(this.handleError<any>('Batch View Failed')));
  // }

  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {
      console.error(error);
      console.log('${operation}failed:${error.message}');
      return of(result as T);
    }
  }
}

---------------------------------------------------------------------------------
- Once Service is ready with all required methods then we can create a component

EmpCrud.Component.ts


import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { Employee } from 'src/app/ModelClass/employee';
import { EmpServiceService } from 'src/app/Services/emp-service.service';

@Component({
  selector: 'app-emp-crud',
  templateUrl: './emp-crud.component.html',
  styleUrls: ['./emp-crud.component.css']
})
export class EmpCrudComponent {
  popup: boolean = false;
  popup1: boolean = false;
  memp: Employee;
  data = [];

  EmployeeForm: FormGroup;
  DeleteForm: FormGroup;
  ViewEmployeeForm: FormGroup;

  submitted = false;
  EventValue: any = "Save"

  constructor(private EmpServiceService: EmpServiceService) { }

  ngOnInit(): void {
    this.GetEmployees();

    this.ViewEmployeeForm = new FormGroup({
      id: new FormControl(),
      name: new FormControl(),
      department: new FormControl(),
      salary: new FormControl()
    })

    this.EmployeeForm = new FormGroup({
      id: new FormControl(""),
      name: new FormControl("", [Validators.required]),
      department: new FormControl("", [Validators.required]),
      salary: new FormControl("", [Validators.required]),
    })

  }
  GetEmployees() {
    // debugger;
    this.EmpServiceService.GetEmployees().subscribe((data: any) => {
      this.data = data;
    })
  }


  Delete(id) {
    this.EventValue = "Delete";
    this.GetEmployees();
    alert("Do you want to Delete"); //


  }


  Save() {
    this.submitted = true;

    if (this.EmployeeForm.invalid) {
      return;
    }

    this.memp = this.EmployeeForm.value;
    this.memp.salary = +this.EmployeeForm.value.salary;
    this.memp.id = 0;
    this.EmpServiceService.postEmployee(this.memp).subscribe((data: any[]) => {
      //debugger;
      this.data = data;
      this.resetFrom();
    })
  }
  Update() {
    //debugger;
    this.submitted = false;
    if (this.EmployeeForm.invalid) {
      return;
    }
    // this.memp=this.EmployeeForm.value.id;
     this.memp = this.EmployeeForm.value;
     this.memp.salary = +this.EmployeeForm.value.salary;
    this.EmpServiceService.putEmployee(this.memp.id, this.memp).subscribe((data: any[]) => {
      this.data = data;
      this.resetFrom();
    })
  }

  EditData(Data) {
    alert("Do you want to Edit")
    debugger;
    this.EmployeeForm.controls["id"].setValue(Data.id);
    this.EmployeeForm.controls["name"].setValue(Data.name);
    this.EmployeeForm.controls["department"].setValue(Data.department);
    this.EmployeeForm.controls["salary"].setValue(Data.salary);
    this.EventValue = "Update";
  }

  ViewData(Data) {
    this.popup = true;
    this.EmployeeForm.controls["id"].setValue(Data.id);
    this.ViewEmployeeForm.controls["name"].setValue(Data.name);
    this.ViewEmployeeForm.controls["department"].setValue(Data.department);
    this.ViewEmployeeForm.controls["salary"].setValue(Data.salary);
  }
  DeleteData(Data) {
    debugger
    alert("Do you want to Delete?")
    this.popup1 = true;
    this.EmployeeForm.controls["id"].setValue(Data.id);
    this.EmployeeForm.controls["name"].setValue(Data.name);
    this.EmployeeForm.controls["department"].setValue(Data.department);
    this.EmployeeForm.controls["salary"].setValue(Data.salary);
    this.EventValue = "Delete";
    this.EmpServiceService.Delete(Data).subscribe(result => {
      console.log(result);
      this.EventValue = "Delete";
    })
  }
  resetFrom() {
    this.GetEmployees();
    this.EmployeeForm.reset();
    this.EventValue = "Save";
    this.EventValue = "Delete";
    this.submitted = false;
  }

}
---------------------------------------------------------------------------------------
In html

<div class="container">
  <form [formGroup]="EmployeeForm" (ngSubmit)="this[EventValue]()">
    <h3 style="color:orangered;"><b> Employee Table CRUD Operation</b></h3>

    <div class="row">
      <div class="overlay" *ngIf="popup1">
        <div class="popup1">
          <div class="head">
            <div class="text-right" (click)="popup1=false">
              <button class="btn btn-sm btn-success">Done</button>
            </div>
          </div>
        </div>
      </div>
      <br>

      <table class="table" style="width: 750px;">


        <tr>
          <td class="text-center" ><b>Name</b></td>
          <td class="text-center">
            <input type="hidden" formControlName="id">
            <input type="text" formControlName="name">
            <div *ngIf="submitted && EmployeeForm.controls.Name.errors" class="text-danger">
              <div *ngIf="EmployeeForm.controls.Name.errors.required">Name is required</div>
            </div>
            <!-- <div class="text-danger" *ngIf="EmployeeForm.controls.Name.errors.required &&submitted ">Name is required</div>  -->
          </td>
        </tr>


        <tr>
          <td class="text-center" ><b>Department</b></td>
          <td class="text-center">
            <input type="text" formControlName="department">
            <div *ngIf="submitted && EmployeeForm.controls.Department.errors" class="text-danger">
              <div *ngIf="EmployeeForm.controls.Department.errors.required">Department is required</div>
            </div>
            <!-- <div *ngIf="submitted && EmployeeForm.controls.Department.errors" class="text-danger">Department is required</div>  -->
          </td>
        </tr>
        <tr>
          <td class="text-center" ><b>Salary</b></td>
          <td class="text-center">
            <input type="string" formControlName="salary">
            <div *ngIf="submitted && EmployeeForm.controls.salary.errors" class="text-danger">
              <div *ngIf="EmployeeForm.controls.salary.errors.required">Salary is required</div>
            </div>
            <!-- <div class="text-danger" *ngIf="EmployeeForm.controls.salary.errors.required &&submitted ">Salary is required</div> -->
          </td>
        </tr>
        <tr>

          <td class="text-center" colspan="2">
            <button type="submit" class="btn btn-primary">{{EventValue}}</button>
          </td>
        </tr>

      </table>
    </div>

    <div class="row">
      <table class="table table-striped" style="width: 750px;">
        <tr>
          <td class="text-center" ><b>Id</b></td>
          <td class="text-center" ><b>Name</b></td>
          <td class="text-center" ><b>Department</b></td>
          <td class="text-center" ><b>Salary</b></td>
          <td class="text-center" colspan="3" ><b> Actions</b> </td>
        </tr>
        <!-- <tr *ngFor="let d of data">
          <td>{{d.id}}</td> -->
        <tr *ngFor="let d of data; let i=index">
          <td class="text-center" >{{i+1}}</td>
          <td class="text-center" >{{d.name}}</td>
          <td class="text-center">{{d.department}}</td>
          <td class="text-center" >{{d.salary}}</td>


          <td class="text-center"><a (click)="EditData(d)" class="btn btn-warning">Edit</a></td>
          <!-- <td><a (click)="delete()" class="btn btn-danger">Delete</a></td> -->

          <td class="text-center"><a (click)="DeleteData(d.id)" class="btn btn-danger">Delete</a></td>
          <td class="text-center"><a (click)="ViewData(d)" class="btn btn-primary">View</a></td>

        </tr>

      </table>
    </div>


    <div class="overlay" *ngIf="popup">
      <div class="popup">
        <div class="head">

        </div>
        <br>
        <form [formGroup]="ViewEmployeeForm">
          <div class="form-group">

            <label class="yes">Name</label><span> :- </span>
            <input type="text" formControlName="name">
          </div>
          <div class="form-group">

            <label class="yes">Department</label><span> :- </span>
            <input type="text" formControlName="department">
          </div>
          <div class="form-group">
            <label class="yes">Salary </label><span> :- </span>

            <input type="text" formControlName="salary">
          </div>
          <div class="text-right" (click)="popup= false"><button class="btn btn-sm btn-success">Ok</button></div>
        </form>
      </div>
    </div>

-----------------------------------------------------------------------------------
ng s 
|
run in the browser







































































































































        



























































































































-




